From: Andrea Zagli <azagli@libero.it>
Date: Fri, 27 May 2016 10:54:40 +0200
Subject: Glib old version - private.

---
 src/form.c                         | 46 +++++++++++++------------
 src/formelement.c                  | 70 ++++++++++++++++++++------------------
 src/formelementfilterluc.c         |  7 ----
 src/formelementfiltertrim.c        |  7 ----
 src/formelementvalidator.c         | 18 ++++++----
 src/formelementvalidatordate.c     |  7 ----
 src/formelementvalidatordate.h     |  2 +-
 src/formelementvalidatornotempty.c |  7 ----
 src/formelementvalidatornotempty.h |  2 +-
 src/formelementvalidatorregex.c    |  7 ----
 src/formelementvalidatorregex.h    |  2 +-
 src/formiprovider.h                |  6 ++--
 src/formvalidator.c                | 20 ++++++-----
 src/formvalidatorcompare.c         |  7 ----
 src/formvalidatorcompare.h         |  2 +-
 src/formvalidatorcomparedate.c     |  7 ----
 src/formvalidatorcomparedate.h     |  2 +-
 17 files changed, 93 insertions(+), 126 deletions(-)

diff --git a/src/form.c b/src/form.c
index 226ca90..03c076f 100644
--- a/src/form.c
+++ b/src/form.c
@@ -57,6 +57,8 @@ static void zak_form_form_finalize (GObject *gobject);
 
 static void zak_form_form_load_modules (ZakFormForm *zakform);
 
+#define ZAK_FORM_FORM_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_FORM, ZakFormFormPrivate))
+
 typedef struct
 	{
 		GPtrArray *ar_modules;
@@ -65,7 +67,7 @@ typedef struct
 		GPtrArray *ar_messages;
 	} ZakFormFormPrivate;
 
-G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (ZakFormForm, zak_form_form, G_TYPE_OBJECT)
+G_DEFINE_ABSTRACT_TYPE (ZakFormForm, zak_form_form, G_TYPE_OBJECT)
 
 #ifdef G_OS_WIN32
 static HMODULE backend_dll = NULL;
@@ -101,6 +103,8 @@ zak_form_form_class_init (ZakFormFormClass *class)
 	object_class->dispose = zak_form_form_dispose;
 	object_class->finalize = zak_form_form_finalize;
 
+	g_type_class_add_private (object_class, sizeof (ZakFormFormPrivate));
+
 	class->get_elements = zak_form_form_get_elements;
 }
 
@@ -170,7 +174,7 @@ zak_form_form_element_xml_parsing (ZakFormForm *zakform, ZakFormElement *element
 	gboolean to_unlink;
 	xmlNode *xnode_tmp;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	xnode = xnode->children;
 	while (xnode)
@@ -356,7 +360,7 @@ zak_form_form_load_from_xml (ZakFormForm *zakform, xmlDoc *xmldoc)
 				{
 					ret = TRUE;
 
-					priv = zak_form_form_get_instance_private (zakform);
+					priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 					cur = cur->children;
 					while (cur)
@@ -497,7 +501,7 @@ zak_form_form_add_element (ZakFormForm *zakform, ZakFormElement *element)
 
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	g_ptr_array_add (priv->ar_elements, g_object_ref (element));
 	ret = TRUE;
@@ -526,7 +530,7 @@ ZakFormElement
 
 	guint i;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	ret = NULL;
 	for (i = 0; i < priv->ar_elements->len; i++)
@@ -601,7 +605,7 @@ zak_form_form_add_validator (ZakFormForm *zakform, ZakFormValidator *validator)
 
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	g_ptr_array_add (priv->ar_validators, g_object_ref (validator));
 	ret = TRUE;
@@ -697,7 +701,7 @@ zak_form_form_clear (ZakFormForm *zakform)
 
 	g_return_if_fail (ZAK_FORM_IS_FORM (zakform));
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	for (i = 0; i < priv->ar_elements->len; i++)
 		{
@@ -721,7 +725,7 @@ zak_form_form_set_as_original (ZakFormForm *zakform)
 
 	g_return_if_fail (ZAK_FORM_IS_FORM (zakform));
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	for (i = 0; i < priv->ar_elements->len; i++)
 		{
@@ -746,7 +750,7 @@ zak_form_form_set_editable (ZakFormForm *zakform, gboolean editable)
 
 	g_return_if_fail (ZAK_FORM_IS_FORM (zakform));
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	for (i = 0; i < priv->ar_elements->len; i++)
 		{
@@ -773,7 +777,7 @@ zak_form_form_is_valid (ZakFormForm *zakform)
 
 	GPtrArray *ar_messages;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	ret = TRUE;
 
@@ -810,7 +814,7 @@ GPtrArray
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return priv->ar_messages;
 }
@@ -830,7 +834,7 @@ zak_form_form_is_changed (ZakFormForm *zakform)
 
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	ret = FALSE;
 
@@ -858,7 +862,7 @@ zak_form_form_load (ZakFormForm *zakform, ZakFormIProvider *provider)
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return zak_form_iprovider_load (provider, priv->ar_elements);
 }
@@ -874,7 +878,7 @@ zak_form_form_insert (ZakFormForm *zakform, ZakFormIProvider *provider)
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return zak_form_iprovider_insert (provider, priv->ar_elements);
 }
@@ -890,7 +894,7 @@ zak_form_form_update (ZakFormForm *zakform, ZakFormIProvider *provider)
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return zak_form_iprovider_update (provider, priv->ar_elements);
 }
@@ -906,7 +910,7 @@ zak_form_form_delete (ZakFormForm *zakform, ZakFormIProvider *provider)
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return zak_form_iprovider_delete (provider, priv->ar_elements);
 }
@@ -919,7 +923,7 @@ zak_form_form_set_property (GObject *object,
                    GParamSpec *pspec)
 {
 	ZakFormForm *zak_form_form = (ZakFormForm *)object;
-	ZakFormFormPrivate *priv = zak_form_form_get_instance_private (zak_form_form);
+	ZakFormFormPrivate *priv = ZAK_FORM_FORM_GET_PRIVATE (zak_form_form);
 
 	switch (property_id)
 		{
@@ -936,7 +940,7 @@ zak_form_form_get_property (GObject *object,
                    GParamSpec *pspec)
 {
 	ZakFormForm *zak_form_form = (ZakFormForm *)object;
-	ZakFormFormPrivate *priv = zak_form_form_get_instance_private (zak_form_form);
+	ZakFormFormPrivate *priv = ZAK_FORM_FORM_GET_PRIVATE (zak_form_form);
 
 	switch (property_id)
 		{
@@ -950,7 +954,7 @@ static void
 zak_form_form_dispose (GObject *gobject)
 {
 	ZakFormForm *zak_form_form = (ZakFormForm *)gobject;
-	ZakFormFormPrivate *priv = zak_form_form_get_instance_private (zak_form_form);
+	ZakFormFormPrivate *priv = ZAK_FORM_FORM_GET_PRIVATE (zak_form_form);
 
 
 
@@ -962,7 +966,7 @@ static void
 zak_form_form_finalize (GObject *gobject)
 {
 	ZakFormForm *zak_form_form = (ZakFormForm *)gobject;
-	ZakFormFormPrivate *priv = zak_form_form_get_instance_private (zak_form_form);
+	ZakFormFormPrivate *priv = ZAK_FORM_FORM_GET_PRIVATE (zak_form_form);
 
 
 
@@ -984,7 +988,7 @@ zak_form_form_load_modules (ZakFormForm* zakform)
 
 	if (g_module_supported ())
 		{
-			priv = zak_form_form_get_instance_private (zakform);
+			priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 			modulesdir = (gchar *)g_getenv ("LIBZAKFORM_MODULESDIR");
 			if (modulesdir == NULL)
diff --git a/src/formelement.c b/src/formelement.c
index eb9a601..ea3542c 100644
--- a/src/formelement.c
+++ b/src/formelement.c
@@ -65,6 +65,8 @@ static void zak_form_element_finalize (GObject *gobject);
 
 static void zak_form_element_xml_parsing (ZakFormElement *element, xmlNode *xmlnode);
 
+#define ZAK_FORM_ELEMENT_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT, ZakFormElementPrivate))
+
 typedef struct
 	{
 		gchar *name;
@@ -86,7 +88,7 @@ typedef struct
 		GPtrArray *pa_messages;
 	} ZakFormElementPrivate;
 
-G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (ZakFormElement, zak_form_element, G_TYPE_OBJECT)
+G_DEFINE_ABSTRACT_TYPE (ZakFormElement, zak_form_element, G_TYPE_OBJECT)
 
 static void
 zak_form_element_class_init (ZakFormElementClass *class)
@@ -100,6 +102,8 @@ zak_form_element_class_init (ZakFormElementClass *class)
 
 	class->xml_parsing = zak_form_element_xml_parsing;
 
+	g_type_class_add_private (object_class, sizeof (ZakFormElementPrivate));
+
 	g_object_class_install_property (object_class, PROP_NAME,
 	                                 g_param_spec_string ("name",
 	                                                      "Name",
@@ -250,7 +254,7 @@ zak_form_element_add_extension (ZakFormElement *element, GObject *extension)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	g_ptr_array_add (priv->pa_extensions, extension);
 }
@@ -426,7 +430,7 @@ zak_form_element_set_name (ZakFormElement *element, const gchar *name)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->name != NULL)
 		{
@@ -448,7 +452,7 @@ gchar
 
 	gchar *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	ret = g_strdup (priv->name);
 
@@ -466,7 +470,7 @@ zak_form_element_set_long_name (ZakFormElement *element, const gchar *long_name)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->long_name != NULL)
 		{
@@ -495,7 +499,7 @@ gchar
 
 	gchar *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->long_name == NULL)
 		{
@@ -520,7 +524,7 @@ zak_form_element_set_is_key (ZakFormElement *element, gboolean is_key)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->is_key = is_key;
 }
@@ -535,7 +539,7 @@ zak_form_element_get_is_key (ZakFormElement *element)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->is_key;
 }
@@ -551,7 +555,7 @@ zak_form_element_set_provider_type (ZakFormElement *element, const gchar *type)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->type != NULL)
 		{
@@ -573,7 +577,7 @@ gchar
 
 	gchar *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	ret = g_strdup (priv->type);
 
@@ -819,7 +823,7 @@ zak_form_element_set_value_gvalue (ZakFormElement *element, GValue *value)
 
 	ret = TRUE;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->value != NULL)
 		{
@@ -848,7 +852,7 @@ GValue
 
 	GValue *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (ZAK_FORM_ELEMENT_GET_CLASS (element)->get_value != NULL)
 		{
@@ -900,7 +904,7 @@ zak_form_element_set_default_value_gvalue (ZakFormElement *element, GValue *valu
 
 	ret = TRUE;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->default_value != NULL)
 		{
@@ -923,7 +927,7 @@ GValue
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->default_value;
 }
@@ -966,7 +970,7 @@ zak_form_element_set_original_value_gvalue (ZakFormElement *element, GValue *val
 
 	ret = TRUE;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->original_value != NULL)
 		{
@@ -989,7 +993,7 @@ GValue
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->original_value;
 }
@@ -1049,7 +1053,7 @@ zak_form_element_set_format (ZakFormElement *element, GHashTable *format)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->format != NULL)
 		{
@@ -1073,7 +1077,7 @@ GHashTable
 
 	GHashTable *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	ret = g_hash_table_ref (priv->format);
 
@@ -1091,7 +1095,7 @@ zak_form_element_set_visible (ZakFormElement *element, gboolean visible)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->visible = visible;
 
@@ -1113,7 +1117,7 @@ zak_form_element_get_visible (ZakFormElement *element)
 
 	gboolean ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (ZAK_FORM_ELEMENT_GET_CLASS (element)->get_visible != NULL)
 		{
@@ -1138,7 +1142,7 @@ zak_form_element_set_editable (ZakFormElement *element, gboolean editable)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->editable = editable;
 
@@ -1160,7 +1164,7 @@ zak_form_element_get_editable (ZakFormElement *element)
 
 	gboolean ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (ZAK_FORM_ELEMENT_GET_CLASS (element)->get_editable != NULL)
 		{
@@ -1185,7 +1189,7 @@ zak_form_element_set_to_load (ZakFormElement *element, gboolean to_load)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->to_load = to_load;
 }
@@ -1200,7 +1204,7 @@ zak_form_element_get_to_load (ZakFormElement *element)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->to_load;
 }
@@ -1216,7 +1220,7 @@ zak_form_element_set_to_save (ZakFormElement *element, gboolean to_save)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->to_save = to_save;
 }
@@ -1231,7 +1235,7 @@ zak_form_element_get_to_save (ZakFormElement *element)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->to_save;
 }
@@ -1246,7 +1250,7 @@ zak_form_element_clear (ZakFormElement *element)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	zak_form_element_set_value_gvalue (element, priv->default_value);
 }
@@ -1314,7 +1318,7 @@ zak_form_element_is_valid (ZakFormElement *element)
 
 	ZakFormElementClass *klass = ZAK_FORM_ELEMENT_GET_CLASS (element);
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	ret = TRUE;
 	ret_callback = FALSE;
@@ -1367,7 +1371,7 @@ zak_form_element_is_valid (ZakFormElement *element)
 GPtrArray
 *zak_form_element_get_messages (ZakFormElement *element)
 {
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->pa_messages;
 }
@@ -1424,7 +1428,7 @@ zak_form_element_set_property (GObject *object,
                    GParamSpec *pspec)
 {
 	ZakFormElement *zak_form_element = (ZakFormElement *)object;
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (zak_form_element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (zak_form_element);
 
 	switch (property_id)
 		{
@@ -1489,7 +1493,7 @@ zak_form_element_get_property (GObject *object,
                    GParamSpec *pspec)
 {
 	ZakFormElement *zak_form_element = (ZakFormElement *)object;
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (zak_form_element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (zak_form_element);
 
 	switch (property_id)
 		{
@@ -1551,7 +1555,7 @@ static void
 zak_form_element_dispose (GObject *gobject)
 {
 	ZakFormElement *zak_form_element = (ZakFormElement *)gobject;
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (zak_form_element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (zak_form_element);
 
 
 
@@ -1563,7 +1567,7 @@ static void
 zak_form_element_finalize (GObject *gobject)
 {
 	ZakFormElement *zak_form_element = (ZakFormElement *)gobject;
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (zak_form_element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (zak_form_element);
 
 
 
diff --git a/src/formelementfilterluc.c b/src/formelementfilterluc.c
index ee9d928..f4f25ef 100644
--- a/src/formelementfilterluc.c
+++ b/src/formelementfilterluc.c
@@ -52,13 +52,6 @@ enum
 		CAMEL
 	};
 
-struct _ZakFormElementFilterLuc
-{
-	ZakFormElementFilter parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_FILTER_LUC_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_FILTER_LUC, ZakFormElementFilterLucPrivate))
 
 typedef struct _ZakFormElementFilterLucPrivate ZakFormElementFilterLucPrivate;
diff --git a/src/formelementfiltertrim.c b/src/formelementfiltertrim.c
index 1a891a8..5977952 100644
--- a/src/formelementfiltertrim.c
+++ b/src/formelementfiltertrim.c
@@ -41,13 +41,6 @@ static void zak_form_element_filter_trim_finalize (GObject *gobject);
 static gboolean zak_form_element_filter_trim_xml_parsing (ZakFormElementFilter *filter, xmlNode *xnode);
 static gchar *zak_form_element_filter_trim_filter (ZakFormElementFilter *filter_trim, const gchar *value);
 
-struct _ZakFormElementFilterTrim
-{
-	ZakFormElementFilter parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_FILTER_TRIM_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_FILTER_TRIM, ZakFormElementFilterTrimPrivate))
 
 typedef struct _ZakFormElementFilterTrimPrivate ZakFormElementFilterTrimPrivate;
diff --git a/src/formelementvalidator.c b/src/formelementvalidator.c
index 063b3b2..2ac0232 100644
--- a/src/formelementvalidator.c
+++ b/src/formelementvalidator.c
@@ -47,6 +47,8 @@ static void zak_form_element_validator_get_property (GObject *object,
 static void zak_form_element_validator_dispose (GObject *gobject);
 static void zak_form_element_validator_finalize (GObject *gobject);
 
+#define ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR, ZakFormElementValidatorPrivate))
+
 typedef struct
 	{
 		gchar *id;
@@ -54,7 +56,7 @@ typedef struct
 		gchar *message;
 	} ZakFormElementValidatorPrivate;
 
-G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (ZakFormElementValidator, zak_form_element_validator, G_TYPE_OBJECT)
+G_DEFINE_ABSTRACT_TYPE (ZakFormElementValidator, zak_form_element_validator, G_TYPE_OBJECT)
 
 static void
 zak_form_element_validator_class_init (ZakFormElementValidatorClass *class)
@@ -66,6 +68,8 @@ zak_form_element_validator_class_init (ZakFormElementValidatorClass *class)
 	object_class->dispose = zak_form_element_validator_dispose;
 	object_class->finalize = zak_form_element_validator_finalize;
 
+	g_type_class_add_private (object_class, sizeof (ZakFormElementValidatorPrivate));
+
 	g_object_class_install_property (object_class, PROP_ID,
 	                                 g_param_spec_string ("id",
 	                                                      "Id",
@@ -195,7 +199,7 @@ void
 zak_form_element_validator_set_message (ZakFormElementValidator *validator,
                                         const gchar *message)
 {
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (validator);
 
 	priv->message = g_strdup (message);
 }
@@ -209,7 +213,7 @@ zak_form_element_validator_set_message (ZakFormElementValidator *validator,
 gchar
 *zak_form_element_validator_get_message (ZakFormElementValidator *validator)
 {
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (validator);
 
 	return g_strdup (priv->message);
 }
@@ -250,7 +254,7 @@ zak_form_element_validator_set_property (GObject *object,
                                          GParamSpec *pspec)
 {
 	ZakFormElementValidator *zak_form_element_validator = (ZakFormElementValidator *)object;
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (zak_form_element_validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (zak_form_element_validator);
 
 	switch (property_id)
 		{
@@ -279,7 +283,7 @@ zak_form_element_validator_get_property (GObject *object,
                                          GParamSpec *pspec)
 {
 	ZakFormElementValidator *zak_form_element_validator = (ZakFormElementValidator *)object;
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (zak_form_element_validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (zak_form_element_validator);
 
 	switch (property_id)
 		{
@@ -305,7 +309,7 @@ static void
 zak_form_element_validator_dispose (GObject *gobject)
 {
 	ZakFormElementValidator *zak_form_element_validator = (ZakFormElementValidator *)gobject;
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (zak_form_element_validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (zak_form_element_validator);
 
 
 
@@ -317,7 +321,7 @@ static void
 zak_form_element_validator_finalize (GObject *gobject)
 {
 	ZakFormElementValidator *zak_form_element_validator = (ZakFormElementValidator *)gobject;
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (zak_form_element_validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (zak_form_element_validator);
 
 
 
diff --git a/src/formelementvalidatordate.c b/src/formelementvalidatordate.c
index 55f0ca9..61708b4 100644
--- a/src/formelementvalidatordate.c
+++ b/src/formelementvalidatordate.c
@@ -45,13 +45,6 @@ static void zak_form_element_validator_date_finalize (GObject *gobject);
 static gboolean zak_form_element_validator_date_xml_parsing (ZakFormElementValidator *validator, xmlNode *xnode);
 static gboolean zak_form_element_validator_date_validate (ZakFormElementValidator *validator_date, const gchar *value);
 
-struct _ZakFormElementValidatorDate
-{
-	ZakFormElementValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_VALIDATOR_DATE_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE, ZakFormElementValidatorDatePrivate))
 
 typedef struct _ZakFormElementValidatorDatePrivate ZakFormElementValidatorDatePrivate;
diff --git a/src/formelementvalidatordate.h b/src/formelementvalidatordate.h
index fad3cf3..f803813 100644
--- a/src/formelementvalidatordate.h
+++ b/src/formelementvalidatordate.h
@@ -32,7 +32,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE                 (zak_form_element_validator_date_get_type ())
-#define ZAK_FORM_ELEMENT_VALIDATOR_DATE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE, ZakFormElementValidatorDate)
+#define ZAK_FORM_ELEMENT_VALIDATOR_DATE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE, ZakFormElementValidatorDate))
 #define ZAK_FORM_ELEMENT_VALIDATOR_DATE_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE, ZakFormElementValidatorDateClass))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_DATE(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_DATE_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE))
diff --git a/src/formelementvalidatornotempty.c b/src/formelementvalidatornotempty.c
index ad40f64..43a74fc 100644
--- a/src/formelementvalidatornotempty.c
+++ b/src/formelementvalidatornotempty.c
@@ -47,13 +47,6 @@ static void zak_form_element_validator_notempty_finalize (GObject *gobject);
 static gboolean zak_form_element_validator_notempty_xml_parsing (ZakFormElementValidator *validator, xmlNode *xnode);
 static gboolean zak_form_element_validator_notempty_validate (ZakFormElementValidator *validator_notempty, const gchar *value);
 
-struct _ZakFormElementValidatorNotempty
-{
-	ZakFormElementValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_VALIDATOR_NOTEMPTY_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY, ZakFormElementValidatorNotemptyPrivate))
 
 typedef struct _ZakFormElementValidatorNotemptyPrivate ZakFormElementValidatorNotemptyPrivate;
diff --git a/src/formelementvalidatornotempty.h b/src/formelementvalidatornotempty.h
index 2fba186..0f7ed77 100644
--- a/src/formelementvalidatornotempty.h
+++ b/src/formelementvalidatornotempty.h
@@ -31,7 +31,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY                 (zak_form_element_validator_notempty_get_type ())
-#define ZAK_FORM_ELEMENT_VALIDATOR_NOTEMPTY(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY, ZakFormElementValidatorNotempty)
+#define ZAK_FORM_ELEMENT_VALIDATOR_NOTEMPTY(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY, ZakFormElementValidatorNotempty))
 #define ZAK_FORM_ELEMENT_VALIDATOR_NOTEMPTY_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY, ZakFormElementValidatorNotemptyClass))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_NOTEMPTY(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_NOTEMPTY_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY))
diff --git a/src/formelementvalidatorregex.c b/src/formelementvalidatorregex.c
index 8614ebf..934426e 100644
--- a/src/formelementvalidatorregex.c
+++ b/src/formelementvalidatorregex.c
@@ -47,13 +47,6 @@ static void zak_form_element_validator_regex_finalize (GObject *gobject);
 static gboolean zak_form_element_validator_regex_xml_parsing (ZakFormElementValidator *validator, xmlNode *xnode);
 static gboolean zak_form_element_validator_regex_validate (ZakFormElementValidator *validator_regex, const gchar *value);
 
-struct _ZakFormElementValidatorRegex
-{
-	ZakFormElementValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_VALIDATOR_REGEX_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX, ZakFormElementValidatorRegexPrivate))
 
 typedef struct _ZakFormElementValidatorRegexPrivate ZakFormElementValidatorRegexPrivate;
diff --git a/src/formelementvalidatorregex.h b/src/formelementvalidatorregex.h
index 4308b7a..efb623f 100644
--- a/src/formelementvalidatorregex.h
+++ b/src/formelementvalidatorregex.h
@@ -31,7 +31,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX                 (zak_form_element_validator_regex_get_type ())
-#define ZAK_FORM_ELEMENT_VALIDATOR_REGEX(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX, ZakFormElementValidatorRegex)
+#define ZAK_FORM_ELEMENT_VALIDATOR_REGEX(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX, ZakFormElementValidatorRegex))
 #define ZAK_FORM_ELEMENT_VALIDATOR_REGEX_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX, ZakFormElementValidatorRegexClass))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_REGEX(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_REGEX_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX))
diff --git a/src/formiprovider.h b/src/formiprovider.h
index be970ae..392dae5 100644
--- a/src/formiprovider.h
+++ b/src/formiprovider.h
@@ -26,10 +26,10 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_IPROVIDER             (zak_form_iprovider_get_type ())
-#define ZAK_FORM_IPROVIDER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), FORM_TYPE_IPROVIDER, ZakFormIprovider))
-#define ZAK_FORM_IPROVIDER_IFACE(obj)       (G_TYPE_CHECK_CLASS_CAST ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIproviderInterface))
+#define ZAK_FORM_IPROVIDER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIProvider))
+#define ZAK_FORM_IPROVIDER_IFACE(obj)       (G_TYPE_CHECK_CLASS_CAST ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIProviderInterface))
 #define ZAK_FORM_IS_IPROVIDER(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_IPROVIDER))
-#define ZAK_FORM_IPROVIDER_GET_IFACE(obj)   (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIproviderInterface))
+#define ZAK_FORM_IPROVIDER_GET_IFACE(obj)   (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIProviderInterface))
 
 
 typedef struct _ZakFormIProvider ZakFormIProvider;
diff --git a/src/formvalidator.c b/src/formvalidator.c
index 24c1f8b..df5cc82 100644
--- a/src/formvalidator.c
+++ b/src/formvalidator.c
@@ -48,6 +48,8 @@ static void zak_form_validator_get_property (GObject *object,
 static void zak_form_validator_dispose (GObject *gobject);
 static void zak_form_validator_finalize (GObject *gobject);
 
+#define ZAK_FORM_VALIDATOR_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_VALIDATOR, ZakFormValidatorPrivate))
+
 typedef struct
 	{
 		gchar *id;
@@ -55,7 +57,7 @@ typedef struct
 		gchar *message;
 	} ZakFormValidatorPrivate;
 
-G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (ZakFormValidator, zak_form_validator, G_TYPE_OBJECT)
+G_DEFINE_ABSTRACT_TYPE (ZakFormValidator, zak_form_validator, G_TYPE_OBJECT)
 
 static void
 zak_form_validator_class_init (ZakFormValidatorClass *class)
@@ -67,6 +69,8 @@ zak_form_validator_class_init (ZakFormValidatorClass *class)
 	object_class->dispose = zak_form_validator_dispose;
 	object_class->finalize = zak_form_validator_finalize;
 
+	g_type_class_add_private (object_class, sizeof (ZakFormValidatorPrivate));
+
 	g_object_class_install_property (object_class, PROP_ID,
 	                                 g_param_spec_string ("id",
 	                                                      "Id",
@@ -92,7 +96,7 @@ zak_form_validator_class_init (ZakFormValidatorClass *class)
 static void
 zak_form_validator_init (ZakFormValidator *zak_form_validator)
 {
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 }
 
 /**
@@ -206,7 +210,7 @@ void
 zak_form_validator_set_message (ZakFormValidator *validator,
                                 const gchar *message)
 {
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (validator);
 
 	priv->message = g_strdup (message);
 }
@@ -220,7 +224,7 @@ zak_form_validator_set_message (ZakFormValidator *validator,
 gchar
 *zak_form_validator_get_message (ZakFormValidator *validator)
 {
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (validator);
 
 	return g_strdup (priv->message);
 }
@@ -261,7 +265,7 @@ zak_form_validator_set_property (GObject *object,
                                  GParamSpec *pspec)
 {
 	ZakFormValidator *zak_form_validator = (ZakFormValidator *)object;
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 
 	switch (property_id)
 		{
@@ -290,7 +294,7 @@ zak_form_validator_get_property (GObject *object,
                                  GParamSpec *pspec)
 {
 	ZakFormValidator *zak_form_validator = (ZakFormValidator *)object;
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 
 	switch (property_id)
 		{
@@ -316,7 +320,7 @@ static void
 zak_form_validator_dispose (GObject *gobject)
 {
 	ZakFormValidator *zak_form_validator = (ZakFormValidator *)gobject;
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 
 
 
@@ -328,7 +332,7 @@ static void
 zak_form_validator_finalize (GObject *gobject)
 {
 	ZakFormValidator *zak_form_validator = (ZakFormValidator *)gobject;
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 
 
 
diff --git a/src/formvalidatorcompare.c b/src/formvalidatorcompare.c
index 2053b14..d07ec6b 100644
--- a/src/formvalidatorcompare.c
+++ b/src/formvalidatorcompare.c
@@ -47,13 +47,6 @@ static void zak_form_validator_compare_finalize (GObject *gobject);
 static gboolean zak_form_validator_compare_xml_parsing (ZakFormValidator *validator, xmlNode *xnode, gpointer form);
 static gboolean zak_form_validator_compare_validate (ZakFormValidator *validator_notempty);
 
-struct _ZakFormValidatorCompare
-{
-	ZakFormValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_VALIDATOR_COMPARE_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE, ZakFormValidatorComparePrivate))
 
 typedef struct _ZakFormValidatorComparePrivate ZakFormValidatorComparePrivate;
diff --git a/src/formvalidatorcompare.h b/src/formvalidatorcompare.h
index 45690ca..6f153de 100644
--- a/src/formvalidatorcompare.h
+++ b/src/formvalidatorcompare.h
@@ -31,7 +31,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_VALIDATOR_COMPARE                 (zak_form_validator_compare_get_type ())
-#define ZAK_FORM_VALIDATOR_COMPARE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE, ZakFormValidatorCompare)
+#define ZAK_FORM_VALIDATOR_COMPARE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE, ZakFormValidatorCompare))
 #define ZAK_FORM_VALIDATOR_COMPARE_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_VALIDATOR_COMPARE, ZakFormValidatorCompareClass))
 #define ZAK_FORM_IS_VALIDATOR_COMPARE(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE))
 #define ZAK_FORM_IS_VALIDATOR_COMPARE_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_VALIDATOR_COMPARE))
diff --git a/src/formvalidatorcomparedate.c b/src/formvalidatorcomparedate.c
index 13089ee..edb658e 100644
--- a/src/formvalidatorcomparedate.c
+++ b/src/formvalidatorcomparedate.c
@@ -47,13 +47,6 @@ static void zak_form_validator_compare_date_finalize (GObject *gobject);
 static gboolean zak_form_validator_compare_date_xml_parsing (ZakFormValidator *validator, xmlNode *xnode, gpointer form);
 static gboolean zak_form_validator_compare_date_validate (ZakFormValidator *validator_notempty);
 
-struct _ZakFormValidatorCompareDate
-{
-	ZakFormValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_VALIDATOR_COMPARE_DATE_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE, ZakFormValidatorCompareDatePrivate))
 
 typedef struct _ZakFormValidatorCompareDatePrivate ZakFormValidatorCompareDatePrivate;
diff --git a/src/formvalidatorcomparedate.h b/src/formvalidatorcomparedate.h
index a68f3af..e096de0 100644
--- a/src/formvalidatorcomparedate.h
+++ b/src/formvalidatorcomparedate.h
@@ -31,7 +31,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE                 (zak_form_validator_compare_date_get_type ())
-#define ZAK_FORM_VALIDATOR_COMPARE_DATE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE, ZakFormValidatorCompareDate)
+#define ZAK_FORM_VALIDATOR_COMPARE_DATE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE, ZakFormValidatorCompareDate))
 #define ZAK_FORM_VALIDATOR_COMPARE_DATE_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE, ZakFormValidatorCompareDateClass))
 #define ZAK_FORM_IS_VALIDATOR_COMPARE_DATE(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE))
 #define ZAK_FORM_IS_VALIDATOR_COMPARE_DATE_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE))
