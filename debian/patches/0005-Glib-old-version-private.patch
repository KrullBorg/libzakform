From: Andrea Zagli <azagli@libero.it>
Date: Fri, 27 May 2016 10:54:40 +0200
Subject: Glib old version - private.

---
 src/form.c                         | 46 +++++++++++++------------
 src/formelement.c                  | 70 ++++++++++++++++++++------------------
 src/formelementfilterluc.c         |  7 ----
 src/formelementfiltertrim.c        |  7 ----
 src/formelementvalidator.c         | 18 ++++++----
 src/formelementvalidatordate.c     |  7 ----
 src/formelementvalidatordate.h     |  2 +-
 src/formelementvalidatornotempty.c |  7 ----
 src/formelementvalidatornotempty.h |  2 +-
 src/formelementvalidatorregex.c    |  7 ----
 src/formelementvalidatorregex.h    |  2 +-
 src/formiprovider.h                |  6 ++--
 src/formvalidator.c                | 20 ++++++-----
 src/formvalidatorcompare.c         |  7 ----
 src/formvalidatorcompare.h         |  2 +-
 src/formvalidatorcomparedate.c     |  7 ----
 src/formvalidatorcomparedate.h     |  2 +-
 17 files changed, 93 insertions(+), 126 deletions(-)

diff --git a/src/form.c b/src/form.c
index c1b54cf..7670029 100644
--- a/src/form.c
+++ b/src/form.c
@@ -61,6 +61,8 @@ static void zak_form_form_finalize (GObject *gobject);
 
 static void zak_form_form_load_modules (ZakFormForm *zakform);
 
+#define ZAK_FORM_FORM_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_FORM, ZakFormFormPrivate))
+
 typedef struct
 	{
 		GPtrArray *ar_modules;
@@ -69,7 +71,7 @@ typedef struct
 		GPtrArray *ar_messages;
 	} ZakFormFormPrivate;
 
-G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (ZakFormForm, zak_form_form, G_TYPE_OBJECT)
+G_DEFINE_ABSTRACT_TYPE (ZakFormForm, zak_form_form, G_TYPE_OBJECT)
 
 #ifdef G_OS_WIN32
 static HMODULE backend_dll = NULL;
@@ -105,6 +107,8 @@ zak_form_form_class_init (ZakFormFormClass *class)
 	object_class->dispose = zak_form_form_dispose;
 	object_class->finalize = zak_form_form_finalize;
 
+	g_type_class_add_private (object_class, sizeof (ZakFormFormPrivate));
+
 	class->get_elements = zak_form_form_get_elements;
 }
 
@@ -176,7 +180,7 @@ zak_form_form_element_xml_parsing (ZakFormForm *zakform, ZakFormElement *element
 	gboolean to_unlink;
 	xmlNode *xnode_tmp;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	xnode = xnode->children;
 	while (xnode)
@@ -354,7 +358,7 @@ zak_form_form_load_from_xml (ZakFormForm *zakform, xmlDoc *xmldoc)
 				{
 					ret = TRUE;
 
-					priv = zak_form_form_get_instance_private (zakform);
+					priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 					cur = cur->children;
 					while (cur)
@@ -503,7 +507,7 @@ zak_form_form_add_element (ZakFormForm *zakform, ZakFormElement *element)
 
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	g_ptr_array_add (priv->ar_elements, g_object_ref (element));
 	ret = TRUE;
@@ -532,7 +536,7 @@ ZakFormElement
 
 	guint i;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	ret = NULL;
 	for (i = 0; i < priv->ar_elements->len; i++)
@@ -607,7 +611,7 @@ zak_form_form_add_validator (ZakFormForm *zakform, ZakFormValidator *validator)
 
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	g_ptr_array_add (priv->ar_validators, g_object_ref (validator));
 	ret = TRUE;
@@ -673,7 +677,7 @@ zak_form_form_clear (ZakFormForm *zakform)
 
 	g_return_if_fail (ZAK_FORM_IS_FORM (zakform));
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	for (i = 0; i < priv->ar_elements->len; i++)
 		{
@@ -697,7 +701,7 @@ zak_form_form_set_as_original (ZakFormForm *zakform)
 
 	g_return_if_fail (ZAK_FORM_IS_FORM (zakform));
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	for (i = 0; i < priv->ar_elements->len; i++)
 		{
@@ -722,7 +726,7 @@ zak_form_form_set_editable (ZakFormForm *zakform, gboolean editable)
 
 	g_return_if_fail (ZAK_FORM_IS_FORM (zakform));
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	for (i = 0; i < priv->ar_elements->len; i++)
 		{
@@ -749,7 +753,7 @@ zak_form_form_is_valid (ZakFormForm *zakform)
 
 	GPtrArray *ar_messages;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	ret = TRUE;
 
@@ -786,7 +790,7 @@ GPtrArray
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return priv->ar_messages;
 }
@@ -806,7 +810,7 @@ zak_form_form_is_changed (ZakFormForm *zakform)
 
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	ret = FALSE;
 
@@ -834,7 +838,7 @@ zak_form_form_load (ZakFormForm *zakform, ZakFormIProvider *provider)
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return zak_form_iprovider_load (provider, priv->ar_elements);
 }
@@ -850,7 +854,7 @@ zak_form_form_insert (ZakFormForm *zakform, ZakFormIProvider *provider)
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return zak_form_iprovider_insert (provider, priv->ar_elements);
 }
@@ -866,7 +870,7 @@ zak_form_form_update (ZakFormForm *zakform, ZakFormIProvider *provider)
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return zak_form_iprovider_update (provider, priv->ar_elements);
 }
@@ -882,7 +886,7 @@ zak_form_form_delete (ZakFormForm *zakform, ZakFormIProvider *provider)
 {
 	ZakFormFormPrivate *priv;
 
-	priv = zak_form_form_get_instance_private (zakform);
+	priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 	return zak_form_iprovider_delete (provider, priv->ar_elements);
 }
@@ -895,7 +899,7 @@ zak_form_form_set_property (GObject *object,
                    GParamSpec *pspec)
 {
 	ZakFormForm *zak_form_form = (ZakFormForm *)object;
-	ZakFormFormPrivate *priv = zak_form_form_get_instance_private (zak_form_form);
+	ZakFormFormPrivate *priv = ZAK_FORM_FORM_GET_PRIVATE (zak_form_form);
 
 	switch (property_id)
 		{
@@ -912,7 +916,7 @@ zak_form_form_get_property (GObject *object,
                    GParamSpec *pspec)
 {
 	ZakFormForm *zak_form_form = (ZakFormForm *)object;
-	ZakFormFormPrivate *priv = zak_form_form_get_instance_private (zak_form_form);
+	ZakFormFormPrivate *priv = ZAK_FORM_FORM_GET_PRIVATE (zak_form_form);
 
 	switch (property_id)
 		{
@@ -926,7 +930,7 @@ static void
 zak_form_form_dispose (GObject *gobject)
 {
 	ZakFormForm *zak_form_form = (ZakFormForm *)gobject;
-	ZakFormFormPrivate *priv = zak_form_form_get_instance_private (zak_form_form);
+	ZakFormFormPrivate *priv = ZAK_FORM_FORM_GET_PRIVATE (zak_form_form);
 
 
 
@@ -938,7 +942,7 @@ static void
 zak_form_form_finalize (GObject *gobject)
 {
 	ZakFormForm *zak_form_form = (ZakFormForm *)gobject;
-	ZakFormFormPrivate *priv = zak_form_form_get_instance_private (zak_form_form);
+	ZakFormFormPrivate *priv = ZAK_FORM_FORM_GET_PRIVATE (zak_form_form);
 
 
 
@@ -960,7 +964,7 @@ zak_form_form_load_modules (ZakFormForm* zakform)
 
 	if (g_module_supported ())
 		{
-			priv = zak_form_form_get_instance_private (zakform);
+			priv = ZAK_FORM_FORM_GET_PRIVATE (zakform);
 
 			modulesdir = (gchar *)g_getenv ("LIBZAKFORM_MODULESDIR");
 			if (modulesdir == NULL)
diff --git a/src/formelement.c b/src/formelement.c
index 9e6db5e..c0eb87e 100644
--- a/src/formelement.c
+++ b/src/formelement.c
@@ -64,6 +64,8 @@ static void zak_form_element_finalize (GObject *gobject);
 
 static void zak_form_element_xml_parsing (ZakFormElement *element, xmlNode *xmlnode);
 
+#define ZAK_FORM_ELEMENT_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT, ZakFormElementPrivate))
+
 typedef struct
 	{
 		gchar *name;
@@ -85,7 +87,7 @@ typedef struct
 		GPtrArray *pa_messages;
 	} ZakFormElementPrivate;
 
-G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (ZakFormElement, zak_form_element, G_TYPE_OBJECT)
+G_DEFINE_ABSTRACT_TYPE (ZakFormElement, zak_form_element, G_TYPE_OBJECT)
 
 static void
 zak_form_element_class_init (ZakFormElementClass *class)
@@ -99,6 +101,8 @@ zak_form_element_class_init (ZakFormElementClass *class)
 
 	class->xml_parsing = zak_form_element_xml_parsing;
 
+	g_type_class_add_private (object_class, sizeof (ZakFormElementPrivate));
+
 	g_object_class_install_property (object_class, PROP_NAME,
 	                                 g_param_spec_string ("name",
 	                                                      "Name",
@@ -217,7 +221,7 @@ zak_form_element_add_extension (ZakFormElement *element, GObject *extension)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	g_ptr_array_add (priv->pa_extensions, extension);
 }
@@ -364,7 +368,7 @@ zak_form_element_set_name (ZakFormElement *element, const gchar *name)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->name != NULL)
 		{
@@ -386,7 +390,7 @@ gchar
 
 	gchar *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	ret = g_strdup (priv->name);
 
@@ -404,7 +408,7 @@ zak_form_element_set_long_name (ZakFormElement *element, const gchar *long_name)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->long_name != NULL)
 		{
@@ -426,7 +430,7 @@ gchar
 
 	gchar *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->long_name == NULL)
 		{
@@ -451,7 +455,7 @@ zak_form_element_set_is_key (ZakFormElement *element, gboolean is_key)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->is_key = is_key;
 }
@@ -466,7 +470,7 @@ zak_form_element_get_is_key (ZakFormElement *element)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->is_key;
 }
@@ -482,7 +486,7 @@ zak_form_element_set_provider_type (ZakFormElement *element, const gchar *type)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->type != NULL)
 		{
@@ -504,7 +508,7 @@ gchar
 
 	gchar *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	ret = g_strdup (priv->type);
 
@@ -722,7 +726,7 @@ zak_form_element_set_value (ZakFormElement *element, const gchar *value)
 
 	ret = TRUE;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->value != NULL)
 		{
@@ -848,7 +848,7 @@ gchar
 
 	GValue *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (ZAK_FORM_ELEMENT_GET_CLASS (element)->get_value != NULL)
 		{
@@ -780,7 +784,7 @@ zak_form_element_set_default_value (ZakFormElement *element, const gchar *value)
 
 	ret = TRUE;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->default_value != NULL)
 		{
@@ -802,7 +806,7 @@ gchar
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->default_value;
 }
@@ -822,7 +826,7 @@ zak_form_element_set_original_value (ZakFormElement *element, const gchar *value
 
 	ret = TRUE;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->original_value != NULL)
 		{
@@ -844,7 +848,7 @@ gchar
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->original_value;
 }
@@ -882,7 +886,7 @@ zak_form_element_set_format (ZakFormElement *element, GHashTable *format)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (priv->format != NULL)
 		{
@@ -906,7 +910,7 @@ GHashTable
 
 	GHashTable *ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	ret = g_hash_table_ref (priv->format);
 
@@ -924,7 +928,7 @@ zak_form_element_set_visible (ZakFormElement *element, gboolean visible)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->visible = visible;
 
@@ -946,7 +950,7 @@ zak_form_element_get_visible (ZakFormElement *element)
 
 	gboolean ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (ZAK_FORM_ELEMENT_GET_CLASS (element)->get_visible != NULL)
 		{
@@ -971,7 +975,7 @@ zak_form_element_set_editable (ZakFormElement *element, gboolean editable)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->editable = editable;
 
@@ -993,7 +997,7 @@ zak_form_element_get_editable (ZakFormElement *element)
 
 	gboolean ret;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	if (ZAK_FORM_ELEMENT_GET_CLASS (element)->get_editable != NULL)
 		{
@@ -1018,7 +1022,7 @@ zak_form_element_set_to_load (ZakFormElement *element, gboolean to_load)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->to_load = to_load;
 }
@@ -1033,7 +1037,7 @@ zak_form_element_get_to_load (ZakFormElement *element)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->to_load;
 }
@@ -1049,7 +1053,7 @@ zak_form_element_set_to_save (ZakFormElement *element, gboolean to_save)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	priv->to_save = to_save;
 }
@@ -1064,7 +1068,7 @@ zak_form_element_get_to_save (ZakFormElement *element)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->to_save;
 }
@@ -1079,7 +1083,7 @@ zak_form_element_clear (ZakFormElement *element)
 {
 	ZakFormElementPrivate *priv;
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	zak_form_element_set_value_gvalue (element, priv->default_value);
 }
@@ -1315,7 +1315,7 @@ zak_form_element_is_valid (ZakFormElement *element)
 
 	ZakFormElementClass *klass = ZAK_FORM_ELEMENT_GET_CLASS (element);
 
-	priv = zak_form_element_get_instance_private (element);
+	priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	ret = TRUE;
 	ret_callback = FALSE;
@@ -1155,7 +1159,7 @@ zak_form_element_is_valid (ZakFormElement *element)
 GPtrArray
 *zak_form_element_get_messages (ZakFormElement *element)
 {
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (element);
 
 	return priv->pa_messages;
 }
@@ -1212,7 +1216,7 @@ zak_form_element_set_property (GObject *object,
                    GParamSpec *pspec)
 {
 	ZakFormElement *zak_form_element = (ZakFormElement *)object;
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (zak_form_element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (zak_form_element);
 
 	switch (property_id)
 		{
@@ -1277,7 +1281,7 @@ zak_form_element_get_property (GObject *object,
                    GParamSpec *pspec)
 {
 	ZakFormElement *zak_form_element = (ZakFormElement *)object;
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (zak_form_element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (zak_form_element);
 
 	switch (property_id)
 		{
@@ -1339,7 +1343,7 @@ static void
 zak_form_element_dispose (GObject *gobject)
 {
 	ZakFormElement *zak_form_element = (ZakFormElement *)gobject;
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (zak_form_element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (zak_form_element);
 
 
 
@@ -1351,7 +1355,7 @@ static void
 zak_form_element_finalize (GObject *gobject)
 {
 	ZakFormElement *zak_form_element = (ZakFormElement *)gobject;
-	ZakFormElementPrivate *priv = zak_form_element_get_instance_private (zak_form_element);
+	ZakFormElementPrivate *priv = ZAK_FORM_ELEMENT_GET_PRIVATE (zak_form_element);
 
 
 
diff --git a/src/formelementfilterluc.c b/src/formelementfilterluc.c
index 543043a..e0f7bf9 100644
--- a/src/formelementfilterluc.c
+++ b/src/formelementfilterluc.c
@@ -51,13 +51,6 @@ enum
 		CAMEL
 	};
 
-struct _ZakFormElementFilterLuc
-{
-	ZakFormElementFilter parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_FILTER_LUC_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_FILTER_LUC, ZakFormElementFilterLucPrivate))
 
 typedef struct _ZakFormElementFilterLucPrivate ZakFormElementFilterLucPrivate;
diff --git a/src/formelementfiltertrim.c b/src/formelementfiltertrim.c
index 6acafbd..8b658f1 100644
--- a/src/formelementfiltertrim.c
+++ b/src/formelementfiltertrim.c
@@ -41,13 +41,6 @@
 static gboolean zak_form_element_filter_trim_xml_parsing (ZakFormElementFilter *filter, xmlNode *xnode);
 static gchar *zak_form_element_filter_trim_filter (ZakFormElementFilter *filter_trim, const gchar *value);
 
-struct _ZakFormElementFilterTrim
-{
-	ZakFormElementFilter parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_FILTER_TRIM_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_FILTER_TRIM, ZakFormElementFilterTrimPrivate))
 
 typedef struct _ZakFormElementFilterTrimPrivate ZakFormElementFilterTrimPrivate;
diff --git a/src/formelementvalidator.c b/src/formelementvalidator.c
index 65fb8db..27c2fbd 100644
--- a/src/formelementvalidator.c
+++ b/src/formelementvalidator.c
@@ -47,14 +47,16 @@ static void zak_form_element_validator_get_property (GObject *object,
 static void zak_form_element_validator_dispose (GObject *gobject);
 static void zak_form_element_validator_finalize (GObject *gobject);
 
+#define ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR, ZakFormElementValidatorPrivate))
+
 typedef struct
 	{
 		gchar *id;
 		gboolean enabled;
 		gchar *message;
 	} ZakFormElementValidatorPrivate;
 
-G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (ZakFormElementValidator, zak_form_element_validator, G_TYPE_OBJECT)
+G_DEFINE_ABSTRACT_TYPE (ZakFormElementValidator, zak_form_element_validator, G_TYPE_OBJECT)
 
 static void
 zak_form_element_validator_class_init (ZakFormElementValidatorClass *class)
@@ -66,6 +66,8 @@ zak_form_element_validator_class_init (ZakFormElementValidatorClass *class)
 	object_class->dispose = zak_form_element_validator_dispose;
 	object_class->finalize = zak_form_element_validator_finalize;
 
+	g_type_class_add_private (object_class, sizeof (ZakFormElementValidatorPrivate));
+
 	g_object_class_install_property (object_class, PROP_ID,
 	                                 g_param_spec_string ("id",
 	                                                      "Id",
@@ -195,7 +195,7 @@ void
 zak_form_element_validator_set_message (ZakFormElementValidator *validator,
                                         const gchar *message)
 {
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (validator);
 
 	priv->message = g_strdup (message);
 }
@@ -209,7 +209,7 @@ zak_form_element_validator_set_message (ZakFormElementValidator *validator,
 gchar
 *zak_form_element_validator_get_message (ZakFormElementValidator *validator)
 {
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (validator);
 
 	return g_strdup (priv->message);
 }
@@ -166,7 +170,7 @@ zak_form_element_validator_set_property (GObject *object,
                                          GParamSpec *pspec)
 {
 	ZakFormElementValidator *zak_form_element_validator = (ZakFormElementValidator *)object;
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (zak_form_element_validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (zak_form_element_validator);
 
 	switch (property_id)
 		{
@@ -191,7 +195,7 @@ zak_form_element_validator_get_property (GObject *object,
                                          GParamSpec *pspec)
 {
 	ZakFormElementValidator *zak_form_element_validator = (ZakFormElementValidator *)object;
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (zak_form_element_validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (zak_form_element_validator);
 
 	switch (property_id)
 		{
@@ -213,7 +217,7 @@ static void
 zak_form_element_validator_dispose (GObject *gobject)
 {
 	ZakFormElementValidator *zak_form_element_validator = (ZakFormElementValidator *)gobject;
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (zak_form_element_validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (zak_form_element_validator);
 
 
 
@@ -225,7 +229,7 @@ static void
 zak_form_element_validator_finalize (GObject *gobject)
 {
 	ZakFormElementValidator *zak_form_element_validator = (ZakFormElementValidator *)gobject;
-	ZakFormElementValidatorPrivate *priv = zak_form_element_validator_get_instance_private (zak_form_element_validator);
+	ZakFormElementValidatorPrivate *priv = ZAK_FORM_ELEMENT_VALIDATOR_GET_PRIVATE (zak_form_element_validator);
 
 
 
diff --git a/src/formelementvalidatordate.c b/src/formelementvalidatordate.c
index df7d0f5..b938f75 100644
--- a/src/formelementvalidatordate.c
+++ b/src/formelementvalidatordate.c
@@ -45,13 +45,6 @@
 static gboolean zak_form_element_validator_date_xml_parsing (ZakFormElementValidator *validator, xmlNode *xnode);
 static gboolean zak_form_element_validator_date_validate (ZakFormElementValidator *validator_date, const gchar *value);
 
-struct _ZakFormElementValidatorDate
-{
-	ZakFormElementValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_VALIDATOR_DATE_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE, ZakFormElementValidatorDatePrivate))
 
 typedef struct _ZakFormElementValidatorDatePrivate ZakFormElementValidatorDatePrivate;
diff --git a/src/formelementvalidatordate.h b/src/formelementvalidatordate.h
index 0406cee..b55fdbe 100644
--- a/src/formelementvalidatordate.h
+++ b/src/formelementvalidatordate.h
@@ -31,7 +31,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE                 (zak_form_element_validator_date_get_type ())
-#define ZAK_FORM_ELEMENT_VALIDATOR_DATE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE, ZakFormElementValidatorDate)
+#define ZAK_FORM_ELEMENT_VALIDATOR_DATE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE, ZakFormElementValidatorDate))
 #define ZAK_FORM_ELEMENT_VALIDATOR_DATE_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE, ZakFormElementValidatorDateClass))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_DATE(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_DATE_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_DATE))
diff --git a/src/formelementvalidatornotempty.c b/src/formelementvalidatornotempty.c
index a3ef4e2..63f6131 100644
--- a/src/formelementvalidatornotempty.c
+++ b/src/formelementvalidatornotempty.c
@@ -47,13 +47,6 @@
 static gboolean zak_form_element_validator_notempty_xml_parsing (ZakFormElementValidator *validator, xmlNode *xnode);
 static gboolean zak_form_element_validator_notempty_validate (ZakFormElementValidator *validator_notempty, const gchar *value);
 
-struct _ZakFormElementValidatorNotempty
-{
-	ZakFormElementValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_VALIDATOR_NOTEMPTY_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY, ZakFormElementValidatorNotemptyPrivate))
 
 typedef struct _ZakFormElementValidatorNotemptyPrivate ZakFormElementValidatorNotemptyPrivate;
diff --git a/src/formelementvalidatornotempty.h b/src/formelementvalidatornotempty.h
index c6e3a20..3dc4c0e 100644
--- a/src/formelementvalidatornotempty.h
+++ b/src/formelementvalidatornotempty.h
@@ -31,7 +31,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY                 (zak_form_element_validator_notempty_get_type ())
-#define ZAK_FORM_ELEMENT_VALIDATOR_NOTEMPTY(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY, ZakFormElementValidatorNotempty)
+#define ZAK_FORM_ELEMENT_VALIDATOR_NOTEMPTY(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY, ZakFormElementValidatorNotempty))
 #define ZAK_FORM_ELEMENT_VALIDATOR_NOTEMPTY_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY, ZakFormElementValidatorNotemptyClass))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_NOTEMPTY(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_NOTEMPTY_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_NOTEMPTY))
diff --git a/src/formelementvalidatorregex.c b/src/formelementvalidatorregex.c
index a0d5b2b..aa8658a 100644
--- a/src/formelementvalidatorregex.c
+++ b/src/formelementvalidatorregex.c
@@ -47,13 +47,6 @@
 static gboolean zak_form_element_validator_regex_xml_parsing (ZakFormElementValidator *validator, xmlNode *xnode);
 static gboolean zak_form_element_validator_regex_validate (ZakFormElementValidator *validator_regex, const gchar *value);
 
-struct _ZakFormElementValidatorRegex
-{
-	ZakFormElementValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_ELEMENT_VALIDATOR_REGEX_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX, ZakFormElementValidatorRegexPrivate))
 
 typedef struct _ZakFormElementValidatorRegexPrivate ZakFormElementValidatorRegexPrivate;
diff --git a/src/formelementvalidatorregex.h b/src/formelementvalidatorregex.h
index f8e62e0..ac437b6 100644
--- a/src/formelementvalidatorregex.h
+++ b/src/formelementvalidatorregex.h
@@ -31,7 +31,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX                 (zak_form_element_validator_regex_get_type ())
-#define ZAK_FORM_ELEMENT_VALIDATOR_REGEX(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX, ZakFormElementValidatorRegex)
+#define ZAK_FORM_ELEMENT_VALIDATOR_REGEX(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX, ZakFormElementValidatorRegex))
 #define ZAK_FORM_ELEMENT_VALIDATOR_REGEX_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX, ZakFormElementValidatorRegexClass))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_REGEX(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX))
 #define ZAK_FORM_IS_ELEMENT_VALIDATOR_REGEX_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_ELEMENT_VALIDATOR_REGEX))
diff --git a/src/formiprovider.h b/src/formiprovider.h
index be970ae..392dae5 100644
--- a/src/formiprovider.h
+++ b/src/formiprovider.h
@@ -26,10 +26,10 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_IPROVIDER             (zak_form_iprovider_get_type ())
-#define ZAK_FORM_IPROVIDER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), FORM_TYPE_IPROVIDER, ZakFormIprovider))
-#define ZAK_FORM_IPROVIDER_IFACE(obj)       (G_TYPE_CHECK_CLASS_CAST ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIproviderInterface))
+#define ZAK_FORM_IPROVIDER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIProvider))
+#define ZAK_FORM_IPROVIDER_IFACE(obj)       (G_TYPE_CHECK_CLASS_CAST ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIProviderInterface))
 #define ZAK_FORM_IS_IPROVIDER(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_IPROVIDER))
-#define ZAK_FORM_IPROVIDER_GET_IFACE(obj)   (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIproviderInterface))
+#define ZAK_FORM_IPROVIDER_GET_IFACE(obj)   (G_TYPE_INSTANCE_GET_INTERFACE ((obj), ZAK_FORM_TYPE_IPROVIDER, ZakFormIProviderInterface))
 
 
 typedef struct _ZakFormIProvider ZakFormIProvider;
diff --git a/src/formvalidator.c b/src/formvalidator.c
index eba0131..6cc3f4e 100644
--- a/src/formvalidator.c
+++ b/src/formvalidator.c
@@ -48,14 +48,16 @@ static void zak_form_validator_get_property (GObject *object,
 static void zak_form_validator_dispose (GObject *gobject);
 static void zak_form_validator_finalize (GObject *gobject);
 
+#define ZAK_FORM_VALIDATOR_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_VALIDATOR, ZakFormValidatorPrivate))
+
 typedef struct
 	{
 		gchar *id;
 		gboolean enabled;
 		gchar *message;
 	} ZakFormValidatorPrivate;
 
-G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE (ZakFormValidator, zak_form_validator, G_TYPE_OBJECT)
+G_DEFINE_ABSTRACT_TYPE (ZakFormValidator, zak_form_validator, G_TYPE_OBJECT)
 
 static void
 zak_form_validator_class_init (ZakFormValidatorClass *class)
@@ -67,6 +67,8 @@ zak_form_validator_class_init (ZakFormValidatorClass *class)
 	object_class->dispose = zak_form_validator_dispose;
 	object_class->finalize = zak_form_validator_finalize;
 
+	g_type_class_add_private (object_class, sizeof (ZakFormValidatorPrivate));
+
 	g_object_class_install_property (object_class, PROP_ID,
 	                                 g_param_spec_string ("id",
 	                                                      "Id",
@@ -92,7 +92,7 @@ zak_form_validator_class_init (ZakFormValidatorClass *class)
 static void
 zak_form_validator_init (ZakFormValidator *zak_form_validator)
 {
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 }
 
 /**
@@ -206,7 +206,7 @@ void
 zak_form_validator_set_message (ZakFormValidator *validator,
                                 const gchar *message)
 {
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (validator);
 
 	priv->message = g_strdup (message);
 }
@@ -220,7 +220,7 @@
 gchar
 *zak_form_validator_get_message (ZakFormValidator *validator)
 {
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (validator);
 
 	return g_strdup (priv->message);
 }
@@ -166,7 +170,7 @@ zak_form_validator_set_property (GObject *object,
                                  GParamSpec *pspec)
 {
 	ZakFormValidator *zak_form_validator = (ZakFormValidator *)object;
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 
 	switch (property_id)
 		{
@@ -261,7 +261,7 @@ zak_form_validator_get_property (GObject *object,
                                  GParamSpec *pspec)
 {
 	ZakFormValidator *zak_form_validator = (ZakFormValidator *)object;
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 
 	switch (property_id)
 		{
@@ -316,7 +316,7 @@ static void
 zak_form_validator_dispose (GObject *gobject)
 {
 	ZakFormValidator *zak_form_validator = (ZakFormValidator *)gobject;
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 
 
 
@@ -328,7 +328,7 @@ static void
 zak_form_validator_finalize (GObject *gobject)
 {
 	ZakFormValidator *zak_form_validator = (ZakFormValidator *)gobject;
-	ZakFormValidatorPrivate *priv = zak_form_validator_get_instance_private (zak_form_validator);
+	ZakFormValidatorPrivate *priv = ZAK_FORM_VALIDATOR_GET_PRIVATE (zak_form_validator);
 
 
 
diff --git a/src/formvalidatorcompare.c b/src/formvalidatorcompare.c
index 02fedf6..6d4eac2 100644
--- a/src/formvalidatorcompare.c
+++ b/src/formvalidatorcompare.c
@@ -47,13 +47,6 @@
 static gboolean zak_form_validator_compare_xml_parsing (ZakFormValidator *validator, xmlNode *xnode, gpointer form);
 static gboolean zak_form_validator_compare_validate (ZakFormValidator *validator_notempty);
 
-struct _ZakFormValidatorCompare
-{
-	ZakFormValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_VALIDATOR_COMPARE_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE, ZakFormValidatorComparePrivate))
 
 typedef struct _ZakFormValidatorComparePrivate ZakFormValidatorComparePrivate;
diff --git a/src/formvalidatorcompare.h b/src/formvalidatorcompare.h
index d4ab5ac..91b9180 100644
--- a/src/formvalidatorcompare.h
+++ b/src/formvalidatorcompare.h
@@ -31,7 +31,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_VALIDATOR_COMPARE                 (zak_form_validator_compare_get_type ())
-#define ZAK_FORM_VALIDATOR_COMPARE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE, ZakFormValidatorCompare)
+#define ZAK_FORM_VALIDATOR_COMPARE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE, ZakFormValidatorCompare))
 #define ZAK_FORM_VALIDATOR_COMPARE_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_VALIDATOR_COMPARE, ZakFormValidatorCompareClass))
 #define ZAK_FORM_IS_VALIDATOR_COMPARE(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE))
 #define ZAK_FORM_IS_VALIDATOR_COMPARE_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_VALIDATOR_COMPARE))
diff --git a/src/formvalidatorcomparedate.c b/src/formvalidatorcomparedate.c
index 78e4360..2546163 100644
--- a/src/formvalidatorcomparedate.c
+++ b/src/formvalidatorcomparedate.c
@@ -47,13 +47,6 @@
 static gboolean zak_form_validator_compare_date_xml_parsing (ZakFormValidator *validator, xmlNode *xnode, gpointer form);
 static gboolean zak_form_validator_compare_date_validate (ZakFormValidator *validator_notempty);
 
-struct _ZakFormValidatorCompareDate
-{
-	ZakFormValidator parent_instance;
-
-	/* Other members, including private data. */
-};
-
 #define ZAK_FORM_VALIDATOR_COMPARE_DATE_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE, ZakFormValidatorCompareDatePrivate))
 
 typedef struct _ZakFormValidatorCompareDatePrivate ZakFormValidatorCompareDatePrivate;
diff --git a/src/formvalidatorcomparedate.h b/src/formvalidatorcomparedate.h
index ec11584..655680a 100644
--- a/src/formvalidatorcomparedate.h
+++ b/src/formvalidatorcomparedate.h
@@ -31,7 +31,7 @@ G_BEGIN_DECLS
 
 
 #define ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE                 (zak_form_validator_compare_date_get_type ())
-#define ZAK_FORM_VALIDATOR_COMPARE_DATE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE, ZakFormValidatorCompareDate)
+#define ZAK_FORM_VALIDATOR_COMPARE_DATE(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE, ZakFormValidatorCompareDate))
 #define ZAK_FORM_VALIDATOR_COMPARE_DATE_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE, ZakFormValidatorCompareDateClass))
 #define ZAK_FORM_IS_VALIDATOR_COMPARE_DATE(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE))
 #define ZAK_FORM_IS_VALIDATOR_COMPARE_DATE_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), ZAK_FORM_TYPE_VALIDATOR_COMPARE_DATE))
